---
export interface Props {
  src: string;
}

const { src } = Astro.props;
---

<div id="starchart-preview-window">
  <form id="starchart-preview--controls">
    <fieldset id="starchart-preview-controls--disabled-wrapper">
      <input
        type="number"
        id="starchart-preview--width"
        name="width"
        value="300"
        aria-label="Width, in px"
      />
    </fieldset>
  </form>
  <div id="starchart-preview-container">
    <button id="starchart-preview-resize" aria-label="resize"></button>
    <iframe id="starchart-preview" src={src}></iframe>
  </div>
</div>

<style>
  fieldset {
    border: none;
    padding: 0.25rem 0.5rem;
    margin: 0;
    background-color: #cccccc;
    display: flex;
    align-items: center;
    justify-content: flex-end;
  }

  input {
    border: 0;
    margin: 0;
    text-align: right;
    width: 4rem;
    padding: 0;
  }

  #starchart-preview-container {
    display: grid;
    grid-template-columns: min-content 25px;
    height: 100%;
  }

  #starchart-preview-resize {
    grid-column: 2 / span 1;
    grid-row: 1;
    height: 100%;
    border: none;
    background-color: #000000;
    cursor: ew-resize;
  }

  #starchart-preview {
    grid-column: 1 / span 1;
    border: none;
    padding: 0;
    margin: 0;
  }

  #starchart-preview-window {
    max-height: 100%;
  }
</style>

<script is:inline>
  window.addEventListener('DOMContentLoaded', () => {
    const parent = document.querySelector('#starchart-preview-window');

    const form = document.querySelector('#starchart-preview--controls');
    const disabledWrapper = document.querySelector(
      '#starchart-preview-controls--disabled-wrapper',
    );
    const widthInput = document.querySelector('#starchart-preview--width');

    const iframe = document.querySelector('#starchart-preview');
    const resizer = document.querySelector('#starchart-preview-resize');
    form.addEventListener('submit', resizeFromForm);
    form.addEventListener('input', resizeFromForm);

    // Set up holders
    let resizing = false;
    let resizeStart;
    let initialSize;
    let delta;
    let total = parent.clientWidth - 25;

    // Set initial settings
    const min = 25;
    let max;

    // Set initial size
    widthInput.value = Math.round(total);
    resize(iframe, total);

    // Set up resize observer
    const rs = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const cr = entry.contentRect;
        iframe.style.height = cr.height + 'px';
        max = cr.width - 25;
        if (total > max) {
          total = max;
          resize(iframe, total);
        }
      }
    });
    rs.observe(parent);

    window.addEventListener('pointerdown', (e) => {
      if (e.target.id === 'starchart-preview-resize') {
        resizing = true;
        resizeStart = e.clientX;
        initialSize = iframe.clientWidth;
        disabledWrapper.disabled = true;
      }
    });

    window.addEventListener('pointermove', (e) => {
      if (resizing) {
        delta = e.clientX - resizeStart;
        total = Number(delta) + Number(initialSize);
        widthInput.value = Math.round(total);
        resize(iframe, total);
      }
    });

    window.addEventListener('pointerup', () => {
      if (resizing) {
        resizing = false;
        disabledWrapper.disabled = false;
        widthInput.value = Math.round(total);
      }
    });

    resizer.addEventListener('pointerleave', () => {
      if (resizing) {
        resizing = false;
        disabledWrapper.disabled = false;
        widthInput.value = Math.round(total);
      }
    });

    /**
     * Resize the iFrame from the form
     * @param {Event} e
     */
    function resizeFromForm(e) {
      e.preventDefault();
      const form = e.target.closest('#starchart-preview--controls');

      const data = Object.fromEntries(new FormData(form));

      if (data.width) {
        const w = Number(data.width);
        resize(iframe, w);
      }
    }

    /**
     * Resize the iFrame
     * @param {HTMLElement} container
     * @param {number} width
     */
    function resize(container, width) {
      if (width < min) {
        width = min;
      } else if (width > max) {
        width = max;
      }
      container.style.width = `${width}px`;
    }
  });
</script>
